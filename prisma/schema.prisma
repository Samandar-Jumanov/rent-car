generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  phoneNumber      String   @unique
  name             String?
  surname          String?
  birthday         String?
  verificationCode String?
  password         String ?

  isVerified       Boolean  @default(false)
  role             Role     @default(USER)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  brends           Brend[]
  rentals          Rental[]
  clients          Client[]
}

model TopBrend {
  id        String   @id @default(cuid())
  userId    String
  brendId   String   @unique
  brend     Brend    @relation(fields: [brendId], references: [id] , onDelete: Cascade , onUpdate:  Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clients   Client[]
}

model Brend {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id] , onDelete:  Cascade , onUpdate:  Cascade)
  logo         String
  brendName    String
  ownerNumber  String    @unique
  address      String
  password     String
  isTopBrend   Boolean   @default(false)
  topBrendId   String?
  topBrend     TopBrend?
  cars         Car[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Car {
  id               String   @id @default(cuid())
  brendId          String
  brend            Brend    @relation(fields: [brendId], references: [id] , onDelete: Cascade , onUpdate:  Cascade)
  model            String
  year             Int
  mileage          Int
  price            Float
  color            String
  fuelType         String
  description      String
  carType          String
  gearType         String
  numberOfDoors    Int
  numberOfSeats    Int
  transmissionType String
  engineCapacity   String
  enginePower      Int
  isAvailable      Boolean  @default(true)
  isTopRent        Boolean  @default(false)
  images           Image[]
  rentals          Rental[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Image {
  id     String @id @default(cuid())
  carId  String
  car    Car    @relation(fields: [carId], references: [id] , onDelete:  Cascade , onUpdate: Cascade)
  url    String
}

model Rental {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id] , onDelete:  Cascade , onUpdate:  Cascade)
  carId     String
  car       Car      @relation(fields: [carId], references: [id] , onDelete: Cascade , onUpdate:  Cascade)
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id          String    @id @default(cuid())
  name        String
  surname     String
  phoneNumber String    @unique
  address     String
  userId      String?
  user        User?     @relation(fields: [userId], references: [id] , onDelete:  Cascade , onUpdate: Cascade)
  topBrendId  String?
  topBrend    TopBrend? @relation(fields: [topBrendId], references: [id] , onDelete:  Cascade , onUpdate:  Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}