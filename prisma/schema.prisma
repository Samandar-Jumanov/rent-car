generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  phoneNumber      String   @unique
  name             String?
  surname          String?
  birthday         String?
  verificationCode String?
  password         String ?

  isVerified       Boolean  @default(false)
  role             Role     @default(USER)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  brends           Brend[]
  rentals          Rental[]

}

model TopBrend {
  id        String   @id @default(cuid())
  userId    String
  brendId   String   @unique
  brend     Brend    @relation(fields: [brendId], references: [id] , onDelete: Cascade , onUpdate:  Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brend {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id] , onDelete:  Cascade , onUpdate:  Cascade)
  logo         String
  brendName    String
  ownerNumber  String    @unique
  address      String
  password     String 
  isTopBrend   Boolean   @default(false)
  carDelivery  CarDelivery  @default(TAKE_AWAY)
  topBrendId   String ?
  payment      PaymentType  @default(CARD)
  topBrend     TopBrend ?
  cars         Car[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}


model Car {
  id               String   @id @default(cuid())
  brendId          String
  brend            Brend    @relation(fields: [brendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title            String   @default("title")
  carBrend         String   @default("MERCADES")
  price            Decimal  @default(180.00)
  color            String
  fuelType         FuelType  @default(PETROL)
  carType          CarType   @default(MANUAL)
  numberOfSeats    Int
  airConditioner   Boolean  @default(true)
  fuelEconomy      String   @default("10l/100km")
  isAvailable      Boolean  @default(true)
  images           String[]
  rentals          Rental[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  mirrorType       MirorType @default(STANDARD)

  @@index([brendId])
  @@index([carBrend, carType, fuelType])
}

model Rental {
  id              String   @id @default(cuid())
  userId          String
  carId           String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  car             Car      @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  rentalStart     String
  rentalEnd       String
  pickupTime      String
  returnTime      String
  requiresDriver  Boolean  @default(false)
  requiresDelivery Boolean @default(false)
  travelRegion    String
  estimatedDistance String
  

  //user info
  username String 
  surname  String

  usersFatherName String
  driverLicence String 
  passport  String
  address   String 

  // needed images 
  passportImages String[]
  driverLicenceImages  String[]

  isActive        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


enum Role {
  USER
  ADMIN
}


enum PaymentType {
    CARD 
    TERMINAL
    CASH
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum CarType {
  MANUAL
  AUTOMATIC
  ELECTRIC
  HYBRID
}

enum MirorType {
  STANDARD
  TINTED
  ANTI_GLARE
  HEATED
  AUTO_DIMMING
}

enum  CarDelivery {
    TAKE_AWAY
    DELIVER
}