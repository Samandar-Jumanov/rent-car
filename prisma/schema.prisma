generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  phoneNumber      String   @unique
  name             String?
  surname          String?
  birthday         String?
  verificationCode String?
  password         String?
  image            String?
  cityId           String? 
  city             Cities?  @relation(fields: [cityId], references: [id])
  isVerified       Boolean  @default(false)
  role             Role     @default(USER)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  brends           Brand[]
  rentals          Rental[]
  favourites       Favorite[]
  reviews          UserReviews[]
  givenReviews     Reviews[]
  templates        SmsTemplates[]
  requests         Requests[]
  
  blockedUsers     BlockedUsers[] @relation("AdminWhoBlocked")
  blockedByAdmin   BlockedUsers[] @relation("UserBlockedByAdmin")
  
  agentBlocks      AgentBlock[]   @relation("AgentWhoBlocked")
  blockedByAgent   AgentBlock[]   @relation("UserBlockedByAgent")

  history          History[]
  sessions         Sessions[]
  colloboratedCars CollaboratedCars[]
}

model UserReviews {
  id        String   @id @default(cuid())
  review    String
  rating    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TopBrend {
  id        String   @id @default(cuid())
  userId    String
  brendId   String   @unique
  brend     Brand    @relation(fields: [brendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  logo           String
  brendName      String
  ownerNumber    String 
  cityId         String      
  password       String 
  carDelivery    CarDelivery      @default(TAKE_AWAY)
  topBrendId     String?
  payment        PaymentType      @default(CARD)
  topBrend       TopBrend?
  ratings        Int[]            @default([0])
  averageRating  Int              @default(0)
  city           Cities          @relation(fields: [cityId], references: [id] , onDelete: Cascade , onUpdate: Cascade)

// longtitue 
// latitude    

  colloboratedCars CollaboratedCars[]
  
  cars           Car[]
  discounts      Discount?
  reviews        Reviews[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Car {
  id               String     @id @default(cuid())
  brendId          String   
  modelId          String 
  colorId          String 
  carBrendId       String 
  title            String     @default("title")
  price            Decimal    @default(180.00)
  isDiscounted     Boolean    @default(true)
  discountedPrice  Int?
  images           String[]
  status           CarStatus  @default(FREE)
  ratings          Int[]      @default([0])
  averageRating    Int        @default(0)
  
  brand            Brand      @relation(fields: [brendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  model            Model      @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carColor         CarColor   @relation(fields: [colorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carBrend         CarBrend   @relation(fields: [carBrendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  favourites       Favorite[]
  requirements     Requirements[]
  features         Feature[]
  rentals          Rental[]
  reviews          Reviews[]
  banners          Banners[]
  discounts        Discount?

  @@index([brendId])
  @@index([modelId])
  @@index([colorId])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Model {
  id          String   @id @default(cuid())
  modelName   String   @unique
  cars        Car[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CarBrend {
  id          String   @id @default(cuid())
  carBrend    String   @unique
  cars        Car[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CarColor {
  id          String   @id @default(cuid())
  color       String   @unique
  cars        Car[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Banners {
  id           String   @id @default(cuid())
  title        String
  carId        String   @unique
  car          Car      @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  choosenImage String
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Reviews {
  id         String   @id @default(cuid())
  carId      String?
  brandId    String?
  userId     String
  review     String
  rating     Int
  car        Car?     @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brand      Brand?   @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Feature {
  id     String  @id @default(cuid())
  carId  String?
  title  String 
  icon   String
  car    Car?    @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Requirements {
  id       String   @id @default(cuid())
  title    String  
  value    String
  icon     String

  carId    String?
  car      Car?     @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rentalId String?
  rental   Rental?  @relation(fields: [rentalId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rental {
  id                String        @id @default(cuid())
  userId            String
  carId             String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  car               Car           @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  rentalStart       String
  rentalEnd         String
  pickupTime        String
  returnTime        String
  travelRegion      String
  estimatedDistance String
  userImage         String        @default("image")
  
  username          String 
  surname           String
  usersFatherName   String
  driverLicence     String 
  passport          String
  address           String 

  passportImages      String[]
  driverLicenceImages String[]
  requirements        Requirements[]

  status            RentalType    @default(NEW)

  isActive          Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Favorite {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  car    Car    @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carId  String

  @@unique([userId, carId])
}

model Discount {
  id                 String   @id @default(cuid())
  carId              String?  @unique
  brendId            String?  @unique

  car                Car?     @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brend              Brand?   @relation(fields: [brendId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  startDate          DateTime 
  endDate            DateTime 
  discountPercentage Int
  discountId         String   @unique

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model BlockedUsers {
  id            String   @id @default(cuid())
  adminId       String
  blockedUserId String   @unique

  admin         User     @relation("AdminWhoBlocked", fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockedUser   User     @relation("UserBlockedByAdmin", fields: [blockedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AgentBlock {
  id        String   @id @default(cuid())
  agentId   String
  userId    String

  agent     User     @relation("AgentWhoBlocked", fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation("UserBlockedByAgent", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id       String   @id @default(cuid())
  agentId  String
  agent    User     @relation(fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sessions {
  id       String   @id @default(cuid())
  agentId  String
  cityId   String
  location Cities   @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isOwner  Boolean
  user     User     @relation(fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CollaboratedCars {
  id      String   @id @default(cuid())
  agentId String
  brandId String

  user    User     @relation(fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brand   Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SmsTemplates {
  id      String   @id @default(cuid())
  title   String   @unique
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Requests { 
  id      String      @id @default(cuid())
  type    RequestType @default(DEMAND)
  userId  String
  content String

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Regions {
  id        String    @id @default(cuid())
  name      String    @unique
  cities    Cities[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cities {
  id       String   @id @default(cuid())
  name     String   @unique
  regionId String
  region   Regions  @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users    User[]
  sessions Sessions[]
  brands    Brand[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  @default(now())
}

enum Role {
  USER
  AGENT
  SUPER_ADMIN
}

enum PaymentType {
  CARD 
  TERMINAL
  CASH
}

enum CarDelivery {
  TAKE_AWAY
  DELIVER
}

enum CarStatus {
  FREE
  RENTED
}

enum RentalType {
  NEW
  ACCEPTED 
  DECLINED
}

enum RequestType {
  DEMAND
  PROPOSAL 
}