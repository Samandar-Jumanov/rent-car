generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  phoneNumber      String   @unique
  name             String?
  surname          String?
  birthday         String?
  verificationCode String?
  password         String ?
  location          String   @default("Tashkent")

  isVerified       Boolean  @default(false)
  role             Role     @default(USER)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  brends           Brand[]
  rentals          Rental[]
  favourites       Favorite[]
  reviews          UserReviews[]

}

model  UserReviews {
     id   String @id @default(cuid())
     review     String
     rating     Int
     userId    String
     user     User @relation(fields: [userId], references: [id] , onDelete:  Cascade , onUpdate:  Cascade)
     
     createdAt  DateTime @default(now())
     updatedAt  DateTime @updatedAt

}

model TopBrend {
  id        String   @id @default(cuid())
  userId    String
  brendId   String   @unique
  brend     Brand    @relation(fields: [brendId], references: [id] , onDelete: Cascade , onUpdate:  Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id] , onDelete:  Cascade , onUpdate:  Cascade)
  logo         String
  brendName    String
  ownerNumber  String    @unique
  address      String
  password     String 
  carDelivery  CarDelivery  @default(TAKE_AWAY)
  topBrendId   String ?
  payment      PaymentType  @default(CARD)
  topBrend     TopBrend ?

  cars         Car[]
  discounts    Discount ?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

}


model Car {
  id               String   @id @default(cuid())
  brendId          String
  title            String   @default("title")
  carBrend         String   @default("MERCADES")
  price            Decimal  @default(180.00)
  isDiscounted     Boolean  @default(true)
  discountedPrice  String ? 
  color            String
  isAvailable      Boolean  @default(true)
  images           String[]
  status           CarStatus   @default(FREE)
 
  brend             Brand    @relation(fields: [brendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  favourites        Favorite[]
  requirements      Requirements[]
  features          Feature[]
  rentals           Rental[]
  reviews           CarRewiew[]
  discounts         Discount ?

  @@index([brendId])

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}


model  CarRewiew {
     id   String  @id @default(cuid())
     carId   String
     review     String
     rating     Int
     car      Car @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Feature {
  id           String    @id @default(cuid())
  carId  String ?
  title String 
  icon  String
  car    Car   ?  @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model Requirements {
      id  String   @id @default(cuid())
      title  String
      icon  String
      upFrontMoney  String

      carId   String ?
      car     Car   ?  @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

model Rental {
  id              String   @id @default(cuid())
  userId          String
  carId           String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  car             Car      @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  rentalStart     String
  rentalEnd       String
  pickupTime      String
  returnTime      String
  requiresDriver  Boolean  @default(false)
  requiresDelivery Boolean @default(false)
  travelRegion    String
  estimatedDistance String
  

  //user info
  username String 
  surname  String

  usersFatherName String
  driverLicence String 
  passport  String
  address   String 

  // needed images 
  passportImages String[]
  driverLicenceImages  String[]

  status  RentalType  @default(NEW)

  isActive        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Favorite {
    id   String @id  @default(cuid())
    carId  String
    userId String
    car     Car    @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate : Cascade)
    user  User @relation(fields: [id], references: [id] ,onDelete: Cascade, onUpdate : Cascade)
  }


model Discount {
  id        String   @id @default(cuid())
  carId     String?    @unique
  brendId   String?    @unique

  car       Car ?    @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate : Cascade)
  brend     Brand ?     @relation(fields: [brendId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  startDate    DateTime 
  endDate      DateTime 
  discountPercentage Int
  discountId    String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Role {
  USER
  AGENT
  SUPER_ADMIN
}


enum PaymentType {
    CARD 
    TERMINAL
    CASH
}


enum  CarDelivery {
    TAKE_AWAY
    DELIVER
}


enum CarStatus {
      FREE
      RENTED
}

enum RentalType {
     NEW
     ACCEPTED 
     DECLINED
}